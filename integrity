#!/usr/local/bin/bash
#set -x

VERSION="1.0.2-CURRENT"
#VERSION="1.0.1"

# NOTES:
# Files not included in hash-files will be listed (VERBOSE only)
# Changed files in the hash-files will be listed (hash error)

# CONFIGURATION:
# Ubuntu configuration
# HASHDEEP="/usr/bin/hashdeep"
# HASHDEEPCONF="-o f -l -x -k"
# MTREE="/usr/bin/fmtree"
# FreeBSD configration
HASHDEEP="/usr/local/bin/md5deep"
HASHDEEPCONF="-o f -l -x"
MTREE="/usr/sbin/mtree"
# General configuration
LINKDIR="/integrity/link"
METADIR="/integrity/meta"
EXTHASH="hashdeep"
EXTMTREE="mtree"
EXTEXCLUDE="exclude"
EXTMTREEKEYS="mtreekeys"
# default set of keywords are flags, gid, link, mode, nlink, size, time, and uid
MTREEKEYS="gid,link,mode,nlink,size,time,uid"
HASHDEEPCONF_CREATE="-o f -l "
MTREECONF=""
MTREE_REPORT_EXTRA_FILES_AS_ERROR="0"
#
LOGTOFILE="0"
LOGFILE="/var/log/integrity"

function log-ok {
    (($VERBOSE)) && printf "[OK]  integrity: $MESSAGE\n"
    (($LOGTOFILE)) && printf "`date "+%F %T"` [OK]  integrity: $MESSAGE\n" >> $LOGFILE
}

function log-dbg {
    (($DEBUG)) && printf "[DBG] integrity: $MESSAGE\n"
    (($DEBUG)) && (($LOGTOFILE)) && printf "`date "+%F %T"` [DBG] integrity: $MESSAGE\n" >> $LOGFILE
}

function log-err {
    printf "[ERR] integrity: $MESSAGE\n"
    (($LOGTOFILE)) && printf "`date "+%F %T"` [ERR] integrity: $MESSAGE\n" >> $LOGFILE
}

if [[ -f /etc/integrity ]]; then
    MESSAGE="  configuration: /etc/integrity found."; log-dbg
    . /etc/integrity
fi
if [[ -f /usr/local/etc/integrity ]]; then
    MESSAGE="  configuration: /usr/local/etc/integrity found."; log-dbg
    . /usr/local/etc/integrity
fi
if [[ -f ~/.integrity ]]; then
    MESSAGE="  configuration: ~/.integrity found."; log-dbg
    . ~/.integrity
fi
if [[ -f ./.integrity ]]; then
    MESSAGE="  configuration: ./.integrity found."; log-dbg
    . ./.integrity
fi

USAGE="
integrity [-h|--help] [-V|--version] [-l|--list] [-c|--commands]
          [-s|--silent] [-d|--debug]
          [-mh|--mutehash] [-mh|--mutemtree] [-me|--muteerrormtree]
          [-i|--init] [-r|--recreate] [-a|--all|<client>]
          -- check integrity of files
where:
 -h  --help ......... show this help and exit
 -V  --version ...... print version and exit
 -l  --list ......... list clients and exit
 -c  --commands ..... list commands to create hash and mtree files and exit
 -s  --silent ....... report errors only
 -mh --mutehash ..... do not list failed hash files
 -mm --mutemtree .... do not list failed mtree files
 -me --muteerrormtree do not report mtree errors to stdout
 -d  --debug ........ print debug messages
 -i  --init ......... create missing hash and mtree files
 -r  --recreate ..... recreate hash and mtree files
 -a  --all .......... check integrity of all clients
 <client> .......... check integrity of a client"

EXPECTED_ARGS=1
if [[ $# -lt $EXPECTED_ARGS ]]; then
    echo "$USAGE"
    exit 0
fi

function find-files {
    if [[ -s "$METADIR/$CLIENT.$EXTEXCLUDE" ]]; then
	MESSAGE="  find-files: $METADIR/$CLIENT.$EXTEXCLUDE found."; log-dbg
	MESSAGE="  find-files: find $LINKDIR/$CLIENT/ -type f | grep -vEf $METADIR/$CLIENT.$EXTEXCLUDE > $METADIR/$CLIENT.files"; log-dbg
	find $LINKDIR/$CLIENT/ -type f | grep -vEf $METADIR/$CLIENT.$EXTEXCLUDE > $METADIR/$CLIENT.files
    elif [[ -s "$METADIR/default.$EXTEXCLUDE" ]]; then
	MESSAGE="  find-files: $METADIR/default.$EXTEXCLUDE found."; log-dbg
	MESSAGE="  find-files: find $LINKDIR/$CLIENT/ -type f | grep -vEf $METADIR/default.$EXTEXCLUDE > $METADIR/$CLIENT.files"; log-dbg
	find $LINKDIR/$CLIENT/ -type f | grep -vEf $METADIR/default.$EXTEXCLUDE > $METADIR/$CLIENT.files
    else
	MESSAGE="  find-files: No exclude file found."; log-dbg
	MESSAGE="  find-files: find $LINKDIR/$CLIENT/ -type f > $METADIR/$CLIENT.files"; log-dbg
	find $LINKDIR/$CLIENT/ -type f > $METADIR/$CLIENT.files
    fi
}

function hash-create-conf {
    HASHDEEPCONF_CREATE+="-f "
    HASHDEEPCONF_CREATE+=$METADIR/$CLIENT
    HASHDEEPCONF_CREATE+=".files "
    MESSAGE="  hash-create-conf: HASHDEEPCONF_CREATE=$HASHDEEPCONF_CREATE"; log-dbg
}

function mtree-create-conf {
# configure exclude file
    if [[ -s "$METADIR/$CLIENT.$EXTEXCLUDE" ]]; then
	MESSAGE="  mtree-create-conf: $METADIR/$CLIENT.$EXTEXCLUDE found."; log-dbg
	MTREECONF_CREATE="-X $METADIR/$CLIENT.$EXTEXCLUDE "
    elif [[ -s "$METADIR/default.$EXTEXCLUDE" ]]; then
	MESSAGE="  mtree-create-conf: $METADIR/default.$EXTEXCLUDE found."; log-dbg
	MTREECONF_CREATE="-X $METADIR/default.$EXTEXCLUDE "
    else
	MESSAGE="  mtree-create-conf: No exclude file found."; log-dbg
    fi
    MTREECONF_CREATE+="-c -p "
    MESSAGE="  mtree-create-conf: MTREECONF_CREATE=$MTREECONF_CREATE"; log-dbg

# configure mtree keywords
    MTREEKEYS_CREATE="-K "
    MESSAGE="  mtree-create-conf: MTREEKEYS_CREATE=$MTREEKEYS_CREATE"; log-dbg
    if [[ -s "$METADIR/$CLIENT.$EXTMTREEKEYS" ]]; then
	MESSAGE="  mtree-create-conf: $METADIR/$CLIENT.$EXTMTREEKEYS found."; log-dbg
	MTREEKEYS_CREATE+=`cat $METADIR/$CLIENT.$EXTMTREEKEYS`
    else
	MTREEKEYS_CREATE+=$MTREEKEYS
    fi
    MESSAGE="  mtree-create-conf: MTREEKEYS_CREATE=$MTREEKEYS_CREATE"; log-dbg
}

function create-client {
    find-files
    create-client-hash
    create-client-mtree
}

function create-client-hash {
    hash-create-conf
    MESSAGE="> Create $METADIR/$CLIENT.$EXTHASH started"; log-ok
    if LOG=$(cd $LINKDIR; $HASHDEEP $HASHDEEPCONF_CREATE > $METADIR/$CLIENT.$EXTHASH); then
	[[ ! -z $LOG ]] && ($MESSAGE="  $HASHDEEP log: $LOG"; log-ok)
	MESSAGE="  $CLIENT hash initialized"; log-ok
    else
	MESSAGE="  $CLIENT $HASHDEEP error: $?"; log-err
	MESSAGE="  $CLIENT $HASHDEEP log: \n$LOG"; log-err
    fi
    MESSAGE="  Create $METADIR/$CLIENT.$EXTHASH finished <"; log-ok
}

function create-client-mtree {
    mtree-create-conf
    MESSAGE="> Create $METADIR/$CLIENT.$EXTMTREE started"; log-ok
    MESSAGE="  create-client-mtree: cd $LINKDIR; $MTREE $MTREEKEYS_CREATE $MTREECONF_CREATE $CLIENT/ >  $METADIR/$CLIENT.$EXTMTREE"; log-dbg
    if LOG=$(cd $LINKDIR; $MTREE $MTREEKEYS_CREATE $MTREECONF_CREATE $CLIENT/ >  $METADIR/$CLIENT.$EXTMTREE); then
	[[ ! -z $LOG ]] && (MESSAGE="  $MTREE: \n$LOG"; log-ok)
	MESSAGE="  $CLIENT mtree initialized"; log-ok
    else
	MESSAGE="  $CLIENT mtree error: $?"; log-err
	MESSAGE="  $CLIENT mtree log: \n$LOG"; log-err
    fi
    MESSAGE="  Create $METADIR/$CLIENT.$EXTMTREE finished <"; log-ok
}

function mtree-check-conf {
    if [[ -s "$METADIR/$CLIENT.$EXTEXCLUDE" ]]; then
	MESSAGE="  mtree-check-conf: $METADIR/$CLIENT.$EXTEXCLUDE found."; log-dbg
	MTREECONF_CHECK="$MTREECONF -X $METADIR/$CLIENT.$EXTEXCLUDE "
    elif [[ -s "$METADIR/default.$EXTEXCLUDE" ]]; then
	MESSAGE="  mtree-check-conf: $METADIR/default.$EXTEXCLUDE found."; log-dbg
	MTREECONF_CHECK="$MTREECONF -X $METADIR/default.$EXTEXCLUDE "
    else
	MESSAGE="  mtree-check-conf: No exclude file found."; log-dbg
	MTREECONF_CHECK="$MTREECONF"
    fi
    if [[ $MTREE_REPORT_EXTRA_FILES_AS_ERROR == 0 ]]; then
	MTREECONF_CHECK+="-e "
	MESSAGE="  mtree-check-conf: Do not report extra files."; log-dbg
    fi
    MESSAGE="  mtree-check-conf: MTREECONF_CHECK=$MTREECONF_CHECK"; log-dbg
}

function check-integrity {
    check-integrity-hashdeep
    check-integrity-mtree
}

function check-integrity-hashdeep {
    MESSAGE="> $CLIENT check started"; log-ok
    if [[ -e "$METADIR/$CLIENT.$EXTHASH" ]]; then
	if [[ -s "$METADIR/$CLIENT.$EXTHASH" ]]; then
	    MESSAGE="cd $LINKDIR; $HASHDEEP $HASHDEEPCONF $METADIR/$CLIENT.$EXTHASH -f $METADIR/$CLIENT.files"; log-dbg
	    if LOG=$(cd $LINKDIR; $HASHDEEP $HASHDEEPCONF $METADIR/$CLIENT.$EXTHASH -f $METADIR/$CLIENT.files 2>&1); then
		MESSAGE="  $CLIENT hash check finished"; log-ok
		[[ ! -z $LOG ]] && ((($MUTEHASH)) || (MESSAGE="  $HASHDEEP log: \n$LOG"; log-err))
	    else
		MESSAGE="  $CLIENT $HASHDEEP error: $?"; log-err
		(($MUTEHASH)) || (MESSAGE="  $CLIENT $HASHDEEP log: \n$LOG"; log-err)
	    fi
	else
	    MESSAGE="  $CLIENT hash file is empty"; log-ok
	fi
    elif [[ $INIT -eq 1 ]]; then
	create-client-hash
    else
	MESSAGE="  $METADIR/$CLIENT.$EXTHASH does not exist"; log-err
    fi
}

function check-integrity-mtree {
    mtree-check-conf
    if [[ -e "$METADIR/$CLIENT.$EXTMTREE" ]]; then
        MESSAGE="  check-integrity-mtree: cd $LINKDIR; $MTREE $MTREECONF_CHECK -f $METADIR/$CLIENT.$EXTMTREE -p $CLIENT/"; log-dbg
        if LOG=$(cd $LINKDIR; $MTREE $MTREECONF_CHECK -f $METADIR/$CLIENT.$EXTMTREE -p $CLIENT/ 2>&1); then
	    MESSAGE="  $CLIENT mtree correct"; log-ok
	    [[ ! -z $LOG ]] && ((($MUTEMTREE)) || (MESSAGE="  $MTREE log: \n$LOG"; log-ok))
	else
	    if [[ $MUTEERRORMTREE -eq 1 ]]; then
		MESSAGE="  $CLIENT $MTREE error: $?"
		(($LOGTOFILE)) && printf "`date "+%F %T"` [ERR] integrity: $MESSAGE\n" >> $LOGFILE
		(($MUTEMTREE)) || MESSAGE="  $CLIENT $MTREE log: \n$LOG"
		(($LOGTOFILE)) && printf "`date "+%F %T"` [ERR] integrity: $MESSAGE\n" >> $LOGFILE
	    else
		MESSAGE="  $CLIENT $MTREE error: $?"; log-err
		(($MUTEMTREE)) || (MESSAGE="  $CLIENT $MTREE log: \n$LOG"; log-err)
	    fi
	fi
    elif [[ $INIT -eq 1 ]]; then
	create-client-mtree
    else
	MESSAGE="  $METADIR/$CLIENT.$EXTMTREE does not exist"; log-err
    fi
    MESSAGE="  $CLIENT check finished <"; log-ok
}

DEBUG=0
VERBOSE=1
MUTEHASH=0
MUTEMTREE=0
MUTEERRORMTREE=0
INIT=0
RECREATE=0
CLIENTS=$(cd $LINKDIR;ls -1)
for i in "$@"; do
    case $i in
	-h|--help)
	    printf "$USAGE\n"
	    exit 0
	    ;;
	-V|--version)
	    printf "$VERSION\n"
	    exit 0
	    ;;
	-l|--list)
	    printf "$CLIENTS\n"
	    exit 0
	    ;;
	-d|--debug)
	    DEBUG=1
	    [[ -f /etc/integrity ]] && (MESSAGE="  configuration: /etc/integrity found."; log-dbg)
	    [[ -f /usr/local/etc/integrity ]] && (MESSAGE="  configuration: /usr/local/etc/integrity found."; log-dbg)
	    [[ -f ~/.integrity ]] && (MESSAGE="  configuration: ~/.integrity found."; log-dbg)
	    [[ -f ./.integrity ]] && (MESSAGE="  configuration: ./.integrity found."; log-dbg)
	    ;;
	-s|--silent)
	    VERBOSE=0
	    ;;
	-mh|--mutehash)
	    MUTEHASH=1
	    ;;
	-mm|--mutemtree)
	    MUTEMTREE=1
	    ;;
	-me|--muteerrormtree)
	    MUTEERRORMTREE=1
	    ;;
	-i|--init)
	    INIT=1
	    ;;
	-r|--recreate)
	    RECREATE=1
	    ;;
	-c|--commands)
	    MESSAGE="  Commands to create the hash and mtree files: TBD"; log-ok
	    #	for i in $CLIENTS; do
	    #	printf "cd $LINKDIR; $HASHDEEP -e -o f -l -r $i/ > $METADIR/$i.$EXTHASH\n"
	    #	printf "cd $LINKDIR; $MTREE $MTREEKEYS -c -p $i/ > $METADIR/$i.$EXTMTREE\n"
	    #	printf "\n"
	    #	done
	    exit 0
	    ;;
	-a|--all)
	    for CLIENT in $CLIENTS; do
		(($RECREATE)) && create-client || check-integrity
	    done
	    ;;
	*)
	    if [[ $CLIENTS =~ $i ]]; then
		CLIENT=$i
		(($RECREATE)) && create-client || check-integrity
	    else
		MESSAGE="  Unknown client $i"; log-err
	    fi
	    ;;
    esac
done

exit 0
